[build-system]
#requires = ["setuptools", "setuptools_scm[toml]>=6.2"]
#build-backend = "setuptools.build_meta"
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
# Storing project metadata in pyproject.toml https://peps.python.org/pep-0621/
name = "voc4cat"
description = "Vocabulary management for NFDI4Cat."
authors = [
    {name = "David Linke", email = "david.linke@catalysis.de"}
]
license = {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.8"

keywords = ["packaging", "dependency", "infer", "pyproject.toml"]

classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Environment :: Console",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
]

dependencies = [
  # install vocexcel directly from a specific branch from github
  "vocexcel @ git+https://github.com/nfdi4cat/VocExcel.git@nfdi4cat-dev",
  "networkx >= 2.8",
  "openpyxl >= 3.0.9",
  "pillow >= 9.1.0",
  "ontospy >= 2.1.0",
]

#dynamic = ["version", "readme"]
dynamic = ["version"]

[project.urls]
homepage = "https://gitlab.fokus.fraunhofer.de/nfdi4cat/ta1-ontologies/voc4cat-tool/"
repository = "https://gitlab.fokus.fraunhofer.de/nfdi4cat/ta1-ontologies/voc4cat-tool/"
documentation = "https://gitlab.fokus.fraunhofer.de/nfdi4cat/ta1-ontologies/voc4cat-tool/"
# changelog = "https://gitlab.fokus.fraunhofer.de/nfdi4cat/ta1-ontologies/voc4cat-tool/CHANGELOG.md"

[project.optional-dependencies]
tests = [
  "pytest",
  "coverage",
]
lint = [
  "black",
  "isort",
]
dev = [
    # Recursively including the project's own optional dependencies requires pip>=21.2
    "voc4cat[tests,lint]",
    "ruff",
    "wemake-python-styleguide",
]

[project.scripts]
voc4cat = "voc4cat.wrapper:main_cli"
merge_vocab = "voc4cat.merge_vocab:main_cli"

#[tool.setuptools.packages.find]
#where = ["src"]
#
#[tool.setuptools_scm]
## presence of section activates version-number generation
#write_to = "src/voc4cat/_version.py"

#[tool.setuptools.dynamic]
#version = {attr = "voc4cat._version.version"}
#readme = {file = ["README.md"]}

[tool.hatch.metadata]
# Hatch disallows direct references for dependencies by default.
# We need to enable them to allow installing NFDI4Cat's vocexcel from github.
allow-direct-references = true

# Build targets for hatch are defined as sections within tool.hatch.build.targets:
[tool.hatch.build.targets.sdist]
exclude = [
  "/docs",
]

[tool.hatch.build.targets.wheel]
packages = ["src/voc4cat"]

# integrates setuptools_scm into hatch, https://github.com/ofek/hatch-vcs
[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/voc4cat/_version.py"

[tool.isort]
profile = "black"
src_paths = ["src", "tests"]

[tool.pylint.format]
max-line-length = "88"

[tool.pytest.ini_options]
# pytest configuration:
# https://docs.pytest.org/en/stable/customize.html

# Sets directories to be searched for tests. Useful when all project tests are
# in a known location to speed up test collection and to avoid picking up
# undesired tests by accident. (related: issue #95)
testpaths = [
  "tests",
 ]

# Directories that are not visited by pytest collector:
norecursedirs = "dist build .tox .git .cache __pycache__ .venv"

# Treat typos in function markers as an error (pytest)
# --strict-markers
# Raise an error instead of a warning for pytest related config issues (pytest)
# --strict-config
# Degree of detail of trace-backs (pytest)
# --tb=short
# Execute doctests in classes, functions, and test modules (pytest)
# --doctest-modules
addopts = "--strict-markers --strict-config --tb=short"

[tool.coverage.run]
# https://coverage.readthedocs.io/en/latest/config.html
parallel = true
branch = true
source = ["voc4cat"]
omit = [
    "**/voc4cat/_version.py",
]

[tool.coverage.paths]
# Specify where coverage schould look for source files.
source = [
    "src",
    "**/site-packages", # for not using tox
    # ".tox/**/site-packages",
]

[tool.coverage.report]
# Show in report which lines are not covered
show_missing = false
# Any line of the source code that matches one of these regexes is excluded
# from being reported as missing.
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    "return NotImplemented",
    "if __name__ == .__main__.:",
]

[tool.coverage.html]
# directory where to write the HTML report files.
directory = ".htmlcov"
title = "voc4cat coverage report"
